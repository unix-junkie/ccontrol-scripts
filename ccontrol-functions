#!/bin/bash
#
# ccontrol-functions
#
# Include this file into your ~/.bashrc or /etc/bashrc.
# Doesn't work in CYGWIN, as ccontrol utility behaviour
# is totally different in Windows.
# See <https://github.com/unix-junkie/ccontrol-scripts>.
#
# $Id$
#
# vim:ft=sh
#

function ccontrol-echo() {
	echo -e "\033[37;97;44;01m${*}\033[0m"
}

function ccontrol-exists?() {
	if [ $# -ne 1 ]
	then
		ccontrol-echo "Usage: $FUNCNAME <INSTANCE_NAME>"
	fi
	instance=`echo $1 | tr '[:lower:]' '[:upper:]'`
	ccontrol qlist | grep "^$instance\b\^" >/dev/null && return 0 || return 1
}

function ccontrol-running() {
	ccontrol qlist | grep 'running'
}

function ccontrol-www-port() {
	if [ $# -ne 1 ]
	then
		return 1
	fi
	instance=`echo $1 | tr '[:lower:]' '[:upper:]'`
	if ccontrol-exists? $instance
	then
		ccontrol qlist | grep "^$instance\b\^" | cut -d^ -f7
		return 0
	else
		return 1
	fi
}

function ccontrol-running?() {
	if [ $# -ne 1 ]
	then
		ccontrol-echo "Usage: $FUNCNAME <INSTANCE_NAME>"
		return 1
	fi
	instance=`echo $1 | tr '[:lower:]' '[:upper:]'`
	if ccontrol-exists? $instance
	then
		status=`ccontrol qlist | grep "^$instance\b\^" | cut -d^ -f4 | cut -d, -f1`
		case "${status}" in
		running)
			style='32;01'
			code=0
			;;
		down)
			style='31;01'
			code=1
			;;
		*)
			style='30;41;01'
			code=1
			;;
		esac
		echo -e "\033[${style}m${status}\033[0m"
		return ${code}
	else
		ccontrol-echo "$FUNCNAME: instance $instance doesn't exist"
		return 1
	fi
}

function ccontrol-stop() {
	motto="Cach`echo 'é' | iconv -f 'UTF-8'`"
	ccontrol-echo "${motto} stopping..."
	ccontrol-running | cut -d^ -f1 | sed 's/$/ quietly/' | xargs -n2 -rt ccontrol stop
	ccontrol-echo "${motto} stopped."
}

function ccontrol-start() {
	motto="Cach`echo 'é' | iconv -f 'UTF-8'`"
	ccontrol-echo "${motto} starting..."
	ccontrol qlist | grep -v 'running' | cut -d^ -f1 | sed 's/$/ quietly/' | xargs -n2 -rp ccontrol start >/dev/null
	ccontrol-running
	ccontrol-echo "${motto} started."
}

function ccontrol-smp() {
	if [ $# -ne 1 ]
	then
		ccontrol-echo "Usage: $FUNCNAME <INSTANCE_NAME>"
		return
	fi
	instance=`echo $1 | tr '[:lower:]' '[:upper:]'`
	if ccontrol-exists? $instance
	then
		if ccontrol-running? $instance >/dev/null
		then
			port=`ccontrol-www-port $instance`
			url="http://${HOSTNAME}:${port}/csp/sys/UtilHome.csp"
			echo -e "\033[34;47;107;04m${url}\033[00m"
			x-www-browser "${url}"
		else
			ccontrol-echo "$FUNCNAME: instance $instance isn't running"
		fi
	else
		ccontrol-echo "$FUNCNAME: instance $instance doesn't exist"
	fi
}

function ccontrol-add-namespace() {
	if [ $# -lt 2 -o $# -gt 3 ]
	then
		ccontrol-echo "Usage: $FUNCNAME <INSTANCE_NAME> <NAMESPACE> [DATABASE]"
		return
	fi
	instance=`echo $1 | tr '[:lower:]' '[:upper:]'`
	if ccontrol-exists? $instance
	then
		if ccontrol-running? $instance >/dev/null
		then
			[ $# -eq 2 ] && database='USER' || database="$3"
			# The default user should NOT have a startup namespace set,
			# otherwise the -U argument will be ignored.
			ccontrol session "$1" -U '%SYS' "##class(Config.Configuration).AddNamespace(\"$2\",\"${database}\")"
		else
			ccontrol-echo "$FUNCNAME: instance $instance isn't running"
		fi
	else
		ccontrol-echo "$FUNCNAME: instance $instance doesn't exist"
	fi
}

function x-www-browser() {
	case `uname -s` in
	Darwin)
		for url in "$@"
		do
			open "${url}"
		done
		;;
	*)
		`which x-www-browser` "$@"
		;;
	esac
}
